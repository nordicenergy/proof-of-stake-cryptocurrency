################################################################################
# Copyright © 2013-2016 The Pwrc Core Developers.                               #
# Copyright © 2016-2018 Jelurida IP B.V.                                       #
#                                                                              #
# See the LICENSE.txt file at the top-level directory of this distribution     #
# for licensing information.                                                   #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement with Jelurida B.V.,  #
# no part of the Pwrc software, including this file, may be copied, modified,   #
# propagated, or distributed except according to the terms contained in the    #
# LICENSE.txt file.                                                            #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

# Do not modify this file. Instead, create a pwrc.properties file with only the
# properties you need to change, and set them there. The values in
# pwrc.properties override those in pwrc-default.properties.



#### SYSTEM ####

# Set the socks proxy host.
#socksProxyHost=localhost

# Set the socks proxy port.
#socksProxyPort=9050



#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
pwrc.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
pwrc.peerServerPort=7874

# Enable UPnP for the peer port.
pwrc.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
#pwrc.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
#pwrc.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
pwrc.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from pwrc.peerServerPort (useful if you do port
# forwarding behind a router).
pwrc.myAddress=

# My platform, to be announced to peers.
pwrc.myPlatform=

# My hallmark, if available.
pwrc.myHallmark=

# Default initial peers. Only used if pwrc.usePeersDb=true.
# Do not modify. Add custom peers to pwrc.wellKnownPeers instead.
pwrc.defaultPeers=88.190.122.175; 24.6.57.205; 82.231.49.67; 109.190.199.219; \
  98.206.91.187; 192.99.58.223; 82.227.177.11; 85.220.0.48; 58.182.217.97; \
  78.126.108.243; 88.235.47.81; 84.28.240.71; 82.234.194.58; 136.62.73.42; \
  62.210.169.244; 31.31.99.200; 24.243.60.61; 202.67.101.208; 173.26.62.252; \
  pwrc.result.de; 24.9.229.81; 94.45.181.25; 188.166.98.134; 70.44.123.88; \
  210.10.173.190; 101.100.169.242; 31.208.48.104; 193.107.172.145; \
  94.213.184.130; 97.123.3.174; 91.155.24.192; 211.226.69.25; 87.118.173.53; \
  213.168.251.105; 107.10.42.108; 70.55.161.204; 73.220.245.128; \
  73.40.166.127; 121.200.12.242; 162.243.242.8; 68.111.204.54; \
  node1.somenodes.org; 108.172.241.238; 142.196.71.247; 145.53.123.212; \
  95.189.100.240; 188.192.25.181; 176.123.61.153; 174.24.116.213; \
  118.210.94.78; 83.87.171.62; 98.250.71.95; 82.197.9.123; 114.252.89.64; \
  node1.pwrc.cucountry.network; 211.208.83.111; 115.187.204.156; 68.6.172.110; \
  134.249.180.20; 81.29.36.82; 207.246.106.15; 77.169.0.179; 116.42.114.68; \
  94.13.48.49; 99.252.233.157; 193.70.86.148; 124.180.106.230; nxt3.y.cz; \
  144.133.66.45; 85.198.115.137; 173.14.231.237; 79.228.20.203; \
  pwrc.jelurida.com; 173.67.5.8; 128.0.172.44; 173.90.209.57; 85.144.167.63; \
  82.72.218.214; 67.197.220.56; 178.196.194.216; 93.103.217.167; \
  212.24.109.82; 118.209.36.239; 24.5.255.116; 66.58.237.69; 97.125.225.190; \
  id-node.indonxt.party; 5.34.71.187; 109.230.255.53; enricoip.no-ip.biz; \
  146.185.139.87; 52.178.93.12; 172.116.130.175; 190.79.18.136; 97.97.29.198; \
  172.116.250.69; aws.scripterron.org; 96.91.154.9; 68.5.145.19; \
  87.243.172.177; 88.173.201.15; 37.195.45.190; 92.244.7.53; 76.106.194.170; \
  www.ardorwallet.com; 47.184.167.132; 24.205.20.217; 115.64.32.231; \
  77.251.29.127; 82.145.40.84; 130.89.170.69; 174.62.173.242; me.dotbot.us; \
  84.240.28.20; 164.132.45.10; 47.33.197.245; 218.215.140.194; 78.88.121.218; \
  37.76.166.14; 88.198.15.19; 149.248.178.181; 24.23.243.94; 109.230.199.49; \
  60.137.89.89; 115.70.55.45; 60.224.46.3; 82.20.109.111; 47.254.130.44; \
  163.172.43.123; 120.149.0.206; 119.28.20.120; 180.233.233.126; \
  104.159.180.185; 108.54.101.125; 50.89.226.22; 23.242.72.243; \
  119.17.145.176; 92.20.79.203; 68.190.213.46; 180.250.209.179; \
  110.21.122.227; 153.206.7.46; 96.95.42.43; 72.234.189.213; 88.105.210.218; \
  82.42.228.138; 217.182.72.43; 77.81.230.151; 71.203.16.221; 89.176.4.204; \
  91.158.119.96; 70.52.42.7; 24.34.0.85; 171.247.225.254; 185.223.28.191; \
  24.99.253.190; 70.170.13.200; 178.24.86.126; 68.109.111.56; 124.168.32.99; \
  163.172.146.55; 1.42.158.133; 150.140.159.209; 89.212.54.79; 71.222.92.177; \
  178.252.118.201; 85.6.164.206; 144.217.162.55; 85.219.182.59; 45.78.172.6; \
  54.213.222.141; 163.158.181.232; 158.69.212.14; 112.211.10.83; 90.91.48.205; \
  zdani.szn.dk; 124.168.126.209; 217.26.24.27; 73.187.9.170; 104.32.5.64; \
  109.230.199.137; 47.219.202.220; 84.31.90.61; 196.210.78.64; 5.132.116.162; \
  97.81.94.57; 84.24.241.168; 76.176.106.7;

# A list of well known peer addresses / host names, separated by '; '. These
# peers are always kept in connected state.
pwrc.wellKnownPeers=

# Known bad peers to be blacklisted.
pwrc.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if pwrc.usePeersDb=true.
# Do not modify. Add custom testnet peers to pwrc.testnetPeers instead.
pwrc.defaultTestnetPeers=198.105.223.72; pwrc.noip.me; 52.20.125.165; \
  testnxt.jelurida.com; 37.59.44.167; 84.208.204.101; enricoip.no-ip.biz; \
  13.58.149.82; 164.132.45.10; 174.140.168.136; 5.200.23.15;

# Well known testnet peers.
pwrc.testnetPeers=

# Maximum number of inbound connections.
pwrc.maxNumberOfInboundConnections=2000

# Maximum number of outbound connections.
pwrc.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
pwrc.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
pwrc.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
pwrc.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
pwrc.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
pwrc.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
pwrc.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer.
pwrc.useWebSockets=true

# WebSocket connection idle timeout (milliseconds).
pwrc.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
pwrc.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
pwrc.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
pwrc.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
pwrc.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
pwrc.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
pwrc.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
pwrc.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6874 (peer networking), 6875 (UI) and 6876 (API) will
# be used.
pwrc.isTestnet=false

# Save known peers in the database
pwrc.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
pwrc.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
pwrc.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# pwrc.shareMyAddress=false, pwrc.wellKnownPeers=, pwrc.testnetPeers=
# and pwrc.usePeersDb=false, and if set to true overrides those properties.
pwrc.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
pwrc.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
pwrc.cjdnsOnly=false

# Do not include exception details when returning error response to peers.
pwrc.hideErrorDetails=false



#### API SERVER ####

# Accept http/json API requests.
pwrc.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
pwrc.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
pwrc.apiServerPort=7876

# Port for https/json API request. If same as pwrc.apiServerPort, the pwrc.apiSSL
# setting determines whether SSL is used or not.
pwrc.apiServerSSLPort=7876

# Enable UPnP for the API ports.
pwrc.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.
pwrc.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
pwrc.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
pwrc.apiResourceBase=./html/www

# Default page for the API server.
pwrc.apiWelcomeFile=index.html

# Java API documentation directory, optional.
pwrc.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
pwrc.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
pwrc.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set pwrc.keyStorePath and
# pwrc.keyStorePassword).
# Non-SSL connections will be disabled if pwrc.apiServerSSLPort is equal to
# pwrc.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
pwrc.apiSSL=false

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#pwrc.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
pwrc.apiServerEnforcePOST=true

# Compress Http responses for the API server. If not set, enabled for openAPI
# nodes only.
#pwrc.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when
# pwrc.apiServerHost=127.0.0.1.
pwrc.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
pwrc.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
pwrc.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
pwrc.apiEventTimeout=300

# Maximum number of applications with active event registrations.
pwrc.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#pwrc.maxUploadFileSize=0

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeNQT=0 has
# been specified. Default is false.
pwrc.correctInvalidFees=false

# APIs to disable, as a semicolon separated list.
pwrc.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
pwrc.disabledAPITags=

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
pwrc.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see pwrc.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
pwrc.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
pwrc.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
pwrc.apiProxyBlacklistingPeriod=1800000

# When the API server is running behind a proxy, use this header to obtain the
# remote host for which the API request was forwarded. Currently only used for
# keeping track of and blacklisting hosts that try to brute force the API admin
# password.
#pwrc.forwardedForHeader=X-Forwarded-For



#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
pwrc.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to
# allow all.
pwrc.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
pwrc.uiServerPort=7875

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
pwrc.uiServerHost=127.0.0.1

# Idle timeout for NRS user interface server, milliseconds.
pwrc.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
pwrc.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
pwrc.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set pwrc.keyStorePath and
# pwrc.keyStorePassword).
pwrc.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
pwrc.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#pwrc.log=pwrc.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#pwrc.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
pwrc.enableLogTraceback=false

# Enable logging of exception stack traces.
pwrc.enableStackTraces=true

# Enable logging of Jetty messages.
#pwrc.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
pwrc.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
pwrc.debugTraceAccounts=

# File name for logging tracked account balances.
pwrc.debugTraceLog=pwrc-trace.csv

# Separator character for trace log.
pwrc.debugTraceSeparator=\t

# Quote character for trace log.
pwrc.debugTraceQuote="

# Log changes to unconfirmed balances.
pwrc.debugLogUnconfirmed=false

# Log account balance calculations for FXT snapshot for the following account.
#pwrc.logFxtBalance=PWRC-RRCQ-N5SL-UX37-G9Y9W



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The nxt_db folder is expected to be in the current working directory, will be
# created if missing.
# pwrc.dbUrl=jdbc:h2:./nxt_db/pwrc;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# pwrc.testDbUrl=jdbc:h2:./nxt_test_db/pwrc;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

pwrc.dbType=h2
pwrc.testDbType=h2

pwrc.dbDir=./nxt_db/pwrc
pwrc.testDbDir=./nxt_test_db/pwrc

pwrc.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
pwrc.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

pwrc.dbUsername=sa
pwrc.testDbUsername=sa

pwrc.dbPassword=sa
pwrc.testDbPassword=sa

# Database connection timeout in seconds.
pwrc.dbLoginTimeout=70

# Database default lock timeout in seconds.
pwrc.dbDefaultLockTimeout=60

# Database max memory rows limit.
pwrc.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
pwrc.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
pwrc.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
pwrc.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
pwrc.maxRollback=800

# When trimming is enabled, it is run every pwrc.trimFrequency blocks.
pwrc.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
pwrc.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, pwrc.maxPrunableLifetime must
# be -1 and pwrc.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
pwrc.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
pwrc.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
pwrc.transactionLogThreshold=15000

# Log the average transaction time after this many minutes.
pwrc.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
pwrc.enablePublicKeyCache=true

# When trimming or pruning derived tables, do a commit after that many records
# are processed. Default if not set is Integer.MAX_VALUE which prevents such
# intermediate commits.
pwrc.batchCommitSize=100



#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
pwrc.forgingDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
pwrc.forgingSpeedup=3

# Maximum number of forging accounts allowed on this node.
pwrc.maxNumberOfForgers=100

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
pwrc.numberOfForkConfirmations=2
pwrc.testnetNumberOfForkConfirmations=1

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
pwrc.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
pwrc.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
pwrc.maxNumberOfMonitors=100



#### DESKTOP WALLET ####

# When using desktop mode and when user interface is available. Launch the
# wallet inside a desktop frame when the node is started.
pwrc.launchDesktopApplication=true

# The default account is used, to automatically login to the wallet during
# startup.
pwrc.defaultDesktopAccount=



#### ACCOUNT LEDGER ####

# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
pwrc.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
pwrc.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
pwrc.ledgerTrimKeep=30000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
pwrc.processPolls=true



#### MINT ####

# Address of the PWRC server to which the mint worker submits its transactions
# (default: localhost).
pwrc.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
pwrc.mint.useHttps=false

# Specify a mintable currency code.
pwrc.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by pwrc.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
pwrc.mint.secretPhrase=

# Number of units to mint per transaction.
# The minting difficulty grows linearly with the number of units per mint.
pwrc.mint.unitsPerMint=1

# The initial nonce used for minting.
# Set to 0 to start with a random nonce.
pwrc.mint.initialNonce=0

# Number of concurrency threads used for minting.
# Set to 0 allocate one thread per processor core.
pwrc.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
pwrc.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response.
pwrc.mint.stopOnError=false



#### Passphrase Recovery Utility ####

# Specify the approximate passphrase that you remember
# recoveryWildcard=hope peac* happen *ouch easy pretend worthless talk them indeed wheel state

# Specify the positions inside the passphrase in which you like to try various options
# The first character position is 1
# recoveryPositions=10,19

# Specify the possible values to use for replacing the unknown positions, unicode characters
# can be specified using the \u notation
# recoveryDictionary=t\u2019ne



#### Shuffling ####

# Delete finished shufflings and their participants. When enabled, records of
# completed shufflings and their participants are deleted after the shuffling
# has finished, which will improve performance by keeping their tables smaller.
pwrc.deleteFinishedShufflings=false

# Use strong secure random implementation. As this can block on unix systems,
# it is disabled by default. Enable only if using haveged or other entropy
# source that makes reading from /dev/random fast, otherwise server-side
# encryption will be unusably slow and cause coin shufflings to fail.
pwrc.useStrongSecureRandom=false

# Maximum number of shufflers allowed to run at the same time on this node.
pwrc.maxNumberOfShufflers=100



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
pwrc.peerServerDoSFilter.maxRequestsPerSec=30
pwrc.peerServerDoSFilter.delayMs=1000
pwrc.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
pwrc.keyStorePath=keystore
pwrc.keyStorePassword=password

# keystore type defaults to JKS can be changed to PKCS12.
pwrc.keyStoreType=JKS



#### Developers only ####

# Force re-validation of blocks and transaction at start.
pwrc.forceValidate=false

# Force re-build of derived objects tables at start.
pwrc.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# pwrc.timeMultiplier=1

# Enable the following AddOns, which must also be on the classpath, e.g. placed
# in the addons/classes or addons/lib directory. List of class names, separated
# by semicolon.
#pwrc.addOns=pwrc.addons.Demo; pwrc.addons.AfterStart; pwrc.addons.BeforeShutdown
pwrc.addOns=pwrc.addons.JPLSnapshot

# Demo after start and before shutdown scripts
#pwrc.afterStartScript=../bin/afterStart.sh
#pwrc.beforeShutdownScript=../bin/beforeShutdown.sh

# NRS normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
pwrc.disableSecurityPolicy=false

# Display a custom warning text on the login screen in the client UI.
#pwrc.customLoginWarning=

# NRS version.
pwrc.version=1.11.13
